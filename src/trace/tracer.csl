param buffer_size: comptime_int;
const types = @import_module("<math/type_helpers>");
const ts = @import_module("<time>");

var measure_buffer = @zeros([buffer_size]u16);
const measure_buffer_ptr : [*]u16 = &measure_buffer;
var measure_buffer_index : u16 = 0;

fn trace_u16(x: u16) void {
    const T = @type_of(x);
    if (measure_buffer_index + types.word_size_of(T) <= buffer_size) {
        const ptr = @ptrcast(*T, &measure_buffer[measure_buffer_index]);
        ptr.* = x;
        measure_buffer_index += types.word_size_of(T);
    }
}

var timer_initialized = false;
fn trace_timestamp() void {
    if (measure_buffer_index + 3 <= buffer_size) {
        if (!timer_initialized) {
            ts.enable_tsc();
            timer_initialized = true;
        }
        ts.get_timestamp(@ptrcast(*[3]u16, &measure_buffer[measure_buffer_index]));
        measure_buffer_index += 3;
    }
}

fn measure(measure_point_id: u16) void {
    trace_u16(measure_point_id);
    trace_timestamp();
}

fn export_names() void {
    @export_symbol(measure_buffer_ptr, "measure_buffer");
}
