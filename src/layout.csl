param Num: i16;
param max_iters: u16;
param T: i16;
param width: u16;
param height: u16;

const bcast_fp: color = @get_color(0);
const bcast_s: color = @get_color(1);
const bcast_df: color = @get_color(2);
const energy_x0: color = @get_color(3);
const energy_x1: color = @get_color(4);
const energy_y0: color = @get_color(5);
const energy_y1: color = @get_color(6);

const memcpy_mod = @import_module("<memcpy/get_params>", .{
    .width = width,
    .height = height,
});

// Configure routes to broadcast flip position
fn bcast_flip_position_routes(x: u16, y: u16) comptime_struct {
    if (x == 0) {
        if (y == 0) {
            return .{ .rx = .{RAMP},  .tx = .{EAST, SOUTH} };
        } else if (y < height - 1) {
            return .{ .rx = .{NORTH}, .tx = .{RAMP, EAST, SOUTH} };
        } else {
            return .{ .rx = .{NORTH}, .tx = .{RAMP, EAST} };
        }
    } else if (x < width - 1) {
        return .{ .rx = .{WEST}, .tx = .{RAMP, EAST} };
    } else {
        return .{ .rx = .{WEST}, .tx = .{RAMP} };
    }
}

// Configure routes to broadcast s
fn bcast_s_routes(y: u16) comptime_struct {
    if (y == 0) {
        return .{ .rx = .{RAMP},  .tx = .{SOUTH} };
    } else if (y < height - 1) {
        return .{ .rx = .{NORTH},  .tx = .{RAMP, SOUTH} };
    } else {
        return .{ .rx = .{NORTH},  .tx = .{RAMP} };
    }
}

// Configure routes to broadcast do_flip
fn bcast_do_flip_routes(x: u16) comptime_struct {
    if (x == 0) {
        return .{ .rx = .{RAMP},  .tx = .{EAST} };
    } else if (x < width - 1) {
        return .{ .rx = .{WEST},  .tx = .{RAMP, EAST} };
    } else {
        return .{ .rx = .{WEST},  .tx = .{RAMP} };
    }
}

// Configure routes for reduction in x, y direction
fn energy_routes(x: u16, y: u16) comptime_struct {
    // color x0 : even x PE -> send,  odd x PE -> receive
    // color x1 :  odd x PE -> send, even x PE -> receive
    // color y0 : even y PE -> send,  odd y PE -> receive
    // color y1 :  odd y PE -> send, even y PE -> receive
    const energy_x_routes = [2]comptime_struct {
        .{ .rx = .{RAMP},  .tx = .{WEST} },
        .{ .rx = .{EAST},  .tx = .{RAMP} },
    };
    const energy_y_routes = [2]comptime_struct {
        .{ .rx = .{RAMP},  .tx = .{NORTH} },
        .{ .rx = .{SOUTH}, .tx = .{RAMP}  },
    };
    return .{
        .x0 = energy_x_routes[(x + 0) % 2],
        .x1 = energy_x_routes[(x + 1) % 2],
        .y0 = energy_y_routes[(y + 0) % 2],
        .y1 = energy_y_routes[(y + 1) % 2],
    };
}

layout {
    @set_rectangle(width, height);
    const common_params = .{
        .Num = Num,
        .max_iters = max_iters,
        .T = T,
        .width = width,
        .height = height,
        .bcast_fp = bcast_fp,
        .bcast_s_color = bcast_s,
        .bcast_df = bcast_df,
    };
    // Receiving and sending reversed on left and right
    const x_params = [2]comptime_struct {
        .{
            .send_west = energy_x0,
            .recv_east = energy_x1,
        },
        .{
            .send_west = energy_x1,
            .recv_east = energy_x0,
        },
    };
    // Receiving and sending reversed up and down
    const y_params = [2]comptime_struct {
        .{
            .send_north = energy_y0,
            .recv_south = energy_y1,
        },
        .{
            .send_north = energy_y1,
            .recv_south = energy_y0,
        },
    };
    for (@range(u16, height)) |y| {
        for (@range(u16, width)) |x| {
            @set_tile_code(x, y, "pe_program.csl",
                @concat_structs(common_params,
                @concat_structs(x_params[x % 2],
                @concat_structs(y_params[y % 2], .{
                    .memcpy_params = memcpy_mod.get_params(x),
                })))
            );
            @set_color_config(x, y, bcast_fp, .{ .routes = bcast_flip_position_routes(x, y) });
            @set_color_config(x, y, bcast_s, .{ .routes = bcast_s_routes(y) });
            @set_color_config(x, y, bcast_df, .{ .routes = bcast_do_flip_routes(x) });
            const energy_routes = energy_routes(x, y);
            @set_color_config(x, y, energy_x0, .{ .routes = energy_routes.x0 });
            @set_color_config(x, y, energy_x1, .{ .routes = energy_routes.x1 });
            @set_color_config(x, y, energy_y0, .{ .routes = energy_routes.y0 });
            @set_color_config(x, y, energy_y1, .{ .routes = energy_routes.y1 });
        }
    }
    @export_name("Q", [*]f32, true);
    @export_name("best_s", [*]i32, false);
    @export_name("min_energy", [*]f32, false);
    @export_name("main", fn()void);
}