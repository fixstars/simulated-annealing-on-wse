param Num: u16;
param max_iters: u16;
param T: i16;
param width: u16;
param height: u16;
param send_west: color;
param recv_east: color;
param send_north: color;
param recv_south: color;
param bcast_fp: color;
param bcast_s_color: color;
param bcast_df: color;
param memcpy_params: comptime_struct;
const x_sum_id = @get_local_task_id(9);
const y_sum_id = @get_local_task_id(10);
const bcast_s_id = @get_local_task_id(11);
const main_task0_id = @get_local_task_id(12);
const main_task1_id = @get_local_task_id(13);

const memcpy_mod = @import_module("<memcpy/memcpy>", memcpy_params);
const layout_mod = @import_module("<layout>");
const math = @import_module("<math>");
const rand = @import_module("rand.csl");

const N: u16 = Num / height;
const M: u16 = Num / width;
const Area = struct {
    x: u16,
    y: u16,
    x_low: u32,
    x_high: u32,
    y_low: u32,
    y_high: u32,
    is_left_col: bool,
    is_right_col: bool,
    is_top_row: bool,
    is_bottom_row: bool,
};
var area: Area;
var Q: [N, M]f32;
var s = @zeros([M]i32); // Begin from all 0
var best_s = @zeros([M]i32);
var flip_index: [1]u32;
var flip_energy: [2]f32;
var do_flip = @zeros([2]f32);
var iter: u16 = 0;
var current_energy: f32 = 0.0; // Begin from 0
var min_energy = @zeros([1]f32);
var tempeature: f32 = @as(f32, Num * Num);
const cool_rate: f32 = 1.0 - 0.04 / @as(f32, T);

// pointers
var Q_ptr: [*]f32 = &Q;
const best_s_ptr: [*]i32 = &best_s;
const min_energy_ptr: [*]f32 = &min_energy;

const energy_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{2} -> flip_energy[i] });
// reduce x_sum result
task y_sum() void {
    if (!area.is_left_col) {
        @activate(main_task1_id);
        return;
    }
    comptime const in_dsd = @get_dsd(fabin_dsd, .{
         .fabric_color = recv_south,
         .extent = 2,
         .input_queue = @get_input_queue(2)
    });
    comptime const out_dsd = @get_dsd(fabout_dsd, .{
        .fabric_color = send_north,
        .extent = 2,
        .output_queue = @get_output_queue(1)
    });
    if (area.is_bottom_row) {
        @fmovs(out_dsd, energy_dsd, .{ .async = true, .activate = main_task1_id });
    } else if (!area.is_top_row) {
        @fadds(out_dsd, energy_dsd, in_dsd, .{ .async = true, .activate = main_task1_id });
    } else {
        @fadds(energy_dsd, energy_dsd, in_dsd, .{ .async = true, .activate = main_task1_id });
    }
}

fn prepare_flip_energy() void {
    const index = flip_index[0];
    var e: f32 = 0.0;
    var sign: i32 = 0;
    if (area.y_low <= index and index < area.y_high) {
        const i = index - area.y_low;
        for(@range(u32, M)) |j| {
            if (j + area.x_low == index) {
                e += Q[i, j];
                sign = s[j];
            } else {
                e += Q[i, j] * @as(f32, s[j]);
            }
        }
    }
    flip_energy[0] = e;
    flip_energy[1] = @bitcast(f32, sign);
}

// calc flip_energy on each row
task x_sum() void {
    prepare_flip_energy();
    comptime const in_dsd = @get_dsd(fabin_dsd, .{
         .fabric_color = recv_east,
         .extent = 2,
         .input_queue = @get_input_queue(4)
    });
    comptime const out_dsd = @get_dsd(fabout_dsd, .{
        .fabric_color = send_west,
        .extent = 2,
        .output_queue = @get_output_queue(3)
    });
    if (area.is_right_col) {
        @fmovs(out_dsd, energy_dsd, .{ .async = true, .activate = y_sum_id });
    } else if (!area.is_left_col) {
        @fadds(out_dsd, energy_dsd, in_dsd, .{ .async = true, .activate = y_sum_id });
    } else {
        @fadds(energy_dsd, energy_dsd, in_dsd, .{ .async = true, .activate = y_sum_id });
    }
}

task bcast_s() void {
    comptime const s_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> s[i] });
    if (area.is_top_row) {
        comptime const out_dsd = @get_dsd(fabout_dsd, .{
            .fabric_color = bcast_s_color,
            .extent = M,
            .output_queue = @get_output_queue(2)
        });
        @fmovs(out_dsd, s_dsd, .{ .async = true, .activate = x_sum_id });
    } else {
        comptime const in_dsd = @get_dsd(fabin_dsd, .{
            .fabric_color = bcast_s_color,
            .extent = M,
            .input_queue = @get_input_queue(1)
        });
        @fmovs(s_dsd, in_dsd, .{ .async = true, .activate = x_sum_id });
    }
}

// update s, current_energy and best_s
fn update_s() void {
    const index = flip_index[0];
    if (area.x_low <= index and index < area.x_high) {
        const i = index - area.x_low;
        if (do_flip[0] != 0.0) {
            s[i] ^= 1;
        }
    }
    current_energy = do_flip[1];
    if (current_energy < min_energy[0]) {
        min_energy[0] = current_energy;
        best_s = s;
    }
}

fn bcast_flip_position() void {
    comptime const index_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> flip_index[i] });
    if (area.is_top_row and area.is_left_col) {
        comptime const out_dsd = @get_dsd(fabout_dsd, .{
            .fabric_color = bcast_fp,
            .extent = 1,
            .output_queue = @get_output_queue(4)
        });
        @mov32(out_dsd, index_dsd, .{ .async = true, .activate = bcast_s_id });
    } else {
        comptime const in_dsd = @get_dsd(fabin_dsd, .{
            .fabric_color = bcast_fp,
            .extent = 1,
            .input_queue = @get_input_queue(3)
        });
        @mov32(index_dsd, in_dsd, .{ .async = true, .activate = bcast_s_id });
    }
}

task main_task0() void {
    if (area.is_top_row) {
        update_s();
    }
    iter += 1;
    if (iter > max_iters) {
        memcpy_mod.unblock_cmd_stream();
        return;
    }
    if (area.is_top_row and area.is_left_col) {
        tempeature *= cool_rate;
        // decide flip position by random
        var i = rand.rand_int(0, Num);
        flip_index[0] = @as(u32, i);
    }
    bcast_flip_position();
}

fn prepare_do_flip() void {
    if (flip_energy[1] > 0.0) {
        flip_energy[0] *= -1.0;
    }
    var d = flip_energy[0]; // energy difference if d was fliped
    var p = math.exp(-d / tempeature);
    if (d < 0.0 or rand.rand_dist(0.0, 1.0) < p) {
        current_energy += d;
        do_flip[0] = 1.0;
    } else {
        do_flip[0] = 0.0;
    }
    do_flip[1] = current_energy;
}

fn bcast_do_flip() void {
    comptime const do_flip_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{2} -> do_flip[i] });
    if (area.is_left_col) {
        // broadcast do flip or not and current_energy
        comptime const out_dsd = @get_dsd(fabout_dsd, .{
            .fabric_color = bcast_df,
            .extent = 2,
            .output_queue = @get_output_queue(4)
        });
        @fmovs(out_dsd, do_flip_dsd, .{ .async = true, .activate = main_task0_id });
    } else {
        // recieve do flip or not and current_energy
        comptime const in_dsd = @get_dsd(fabin_dsd, .{
            .fabric_color = bcast_df,
            .extent = 2,
            .input_queue = @get_input_queue(3)
        });
        @fmovs(do_flip_dsd, in_dsd, .{ .async = true, .activate = main_task0_id });
    }
}

task main_task1() void {
    if (!area.is_top_row) {
        @activate(main_task0_id);
        return;
    }
    if (area.is_left_col) {
        prepare_do_flip();
    }
    bcast_do_flip();
}

fn main() void {
    const x = layout_mod.get_x_coord();
    const y = layout_mod.get_y_coord();
    area.x = x;
    area.y = y;
    area.x_low  = (@as(u32, x) + 0) * @as(u32, M);
    area.x_high = (@as(u32, x) + 1) * @as(u32, M);
    area.y_low  = (@as(u32, y) + 0) * @as(u32, N);
    area.y_high = (@as(u32, y) + 1) * @as(u32, N);
    area.is_left_col   = x == 0;
    area.is_right_col  = x == width - 1;
    area.is_top_row    = y == 0;
    area.is_bottom_row = y == height - 1;
    rand.set_initial_state(@as(u32, y) << 16 | @as(u32, x) + 1);
    @activate(main_task0_id);
}

comptime {
    @export_symbol(Q_ptr, "Q");
    @export_symbol(best_s_ptr, "best_s");
    @export_symbol(min_energy_ptr, "min_energy");
    @export_symbol(main);
    @bind_local_task(y_sum, y_sum_id);
    @bind_local_task(x_sum, x_sum_id);
    @bind_local_task(bcast_s, bcast_s_id);
    @bind_local_task(main_task0, main_task0_id);
    @bind_local_task(main_task1, main_task1_id);
}